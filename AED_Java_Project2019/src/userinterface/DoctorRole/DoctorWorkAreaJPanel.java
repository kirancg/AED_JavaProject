/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.UserOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorAppointmentWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import com.sun.corba.se.impl.presentation.rmi.IDLTypesUtil;
import java.awt.CardLayout;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.DoctorRole.SendMailUsingAuthentication;

/**
 *
 * @author raunak
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private DoctorOrganization doctorOrganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    public static final Pattern VALID_EMAIL_ADDRESS_REGEX
            = Pattern.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$", Pattern.CASE_INSENSITIVE);
   

    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, DoctorOrganization doctorOrganization, Enterprise enterprise, EcoSystem business) {
        
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.doctorOrganization= doctorOrganization;
        this.enterprise = enterprise;
        this.business = business;
        
        populateRequestTable();
    }

   
    
    
    
    
    
    
  public void populateRequestTable(){
      DefaultTableModel model = (DefaultTableModel)workRequestTable.getModel();
      
       model.setRowCount(0);
        for (WorkRequest docrequest : doctorOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = docrequest;
            row[1] = docrequest.getAppointmentTimings();
            row[2] = docrequest.getAppointmentDate();
            row[3] = docrequest.getReceiver() == null ? null : docrequest.getReceiver().getEmployee().getName();
            row[4] = docrequest.getStatus();
            row[5] = docrequest.getEmail();
            model.addRow(row);
        }
    }
      
  
   
   
   
   
   
   
   
   
   
   
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        emailTextField = new javax.swing.JTextField();
        presc_Jbtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(new java.awt.Color(255, 255, 255));

        workRequestTable.setBackground(new java.awt.Color(0, 204, 255));
        workRequestTable.setForeground(new java.awt.Color(255, 255, 255));
        workRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Sender", "Appointment Timings", "Appointment Date", "Receiver", "Status", "email"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestTable.setGridColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(workRequestTable);
        if (workRequestTable.getColumnModel().getColumnCount() > 0) {
            workRequestTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestTable.getColumnModel().getColumn(5).setResizable(false);
        }

        assignJButton.setBackground(new java.awt.Color(153, 0, 0));
        assignJButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(255, 255, 255));
        assignJButton.setText("Give Appointment and Send Email ");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        presc_Jbtn.setBackground(new java.awt.Color(0, 51, 102));
        presc_Jbtn.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        presc_Jbtn.setForeground(new java.awt.Color(255, 255, 255));
        presc_Jbtn.setText("Prescribe Medicine");
        presc_Jbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presc_JbtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 204, 102));
        jLabel1.setText("Doctor Work Area ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assignJButton)
                        .addGap(105, 105, 105)
                        .addComponent(presc_Jbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 32, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(presc_Jbtn))
                .addGap(290, 290, 290))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
       int selectedRow = workRequestTable.getSelectedRow();
        if (selectedRow < 0) {
            return;
        }
        WorkRequest docrequest = (WorkRequest) workRequestTable.getValueAt(selectedRow, 0);
        docrequest.setReceiver(userAccount);
        docrequest.setStatus("Appointment details send");
        
        emailTextField.setText(docrequest.getEmail());
        populateRequestTable();

boolean isValidEmail = validate(emailTextField.getText());
if (!isValidEmail) {
  JOptionPane.showMessageDialog(null, "Please enter a valid email address", "Warning", JOptionPane.WARNING_MESSAGE);
          }
if ( isValidEmail) {
                    
                    JOptionPane.showMessageDialog(null, "You have successfully registered for event!!");
                    SendMailUsingAuthentication sendEmail = new SendMailUsingAuthentication();
                    sendEmail.send("alokNagar567@gmail.com", "alok**(1)",
                            emailTextField.getText(), "Appointment !!", "your Appointment is sheduled at" + docrequest.getAppointmentTimings());
                    JOptionPane.showMessageDialog(null, "Check your Mail Inbox");
                    emailTextField.setText("");
                }

 

             else {
                JOptionPane.showMessageDialog(null, "You have already registered for this event", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        


    }//GEN-LAST:event_assignJButtonActionPerformed

    private void presc_JbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presc_JbtnActionPerformed
       int selectedRow = workRequestTable.getSelectedRow();
       if(selectedRow >= 0){
           
           if(selectedRow < 0 ){
               return;
           }
           DoctorAppointmentWorkRequest docrequest =(DoctorAppointmentWorkRequest)workRequestTable.getValueAt(selectedRow, 0);
           docrequest.setStatus("prescription");
           
           ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, userAccount, docrequest, enterprise, business);
            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
       }else{
           JOptionPane.showMessageDialog(null, "Please Select any row");
       }
       
    }//GEN-LAST:event_presc_JbtnActionPerformed

public static boolean validate(String emailStr){
    if(emailStr == null){
        return false;
    }
    Matcher matcher = VALID_EMAIL_ADDRESS_REGEX.matcher(emailStr);
    return matcher.find();
}

    
    
    
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton presc_Jbtn;
    private javax.swing.JTable workRequestTable;
    // End of variables declaration//GEN-END:variables
}